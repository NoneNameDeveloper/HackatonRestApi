import os

import requests
import aiogram
from aiogram import types

import logging
from urllib.parse import quote
import traceback
import asyncio

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
					level=logging.INFO)

base_url = os.environ["TADA_API_BASE_URL"]  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ê–ü–ò
company_token = os.environ["TADA_API_COMPANY_TOKEN"]  # —Ç–æ–∫–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏, —è–≤–ª—è—é—â–µ–π—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –≤ TADA
token = os.environ['TELEGRAM_TOKEN']  # –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ê–ü–ò

bot = aiogram.Bot(token, parse_mode="html")

dp = aiogram.Dispatcher(bot)

user_database = {}  # –±–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

telegram_limit_value = 4000  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—à–µ–Ω–∏–∏


def create_user_kb(buttons: list[str], conversation_id: int):
	"""
	–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫
	–∏–∑ –ê–ü–ò
	"""
	keyboard = types.InlineKeyboardMarkup()

	i = 0
	for u in buttons or []:
		try:
			keyboard.add(types.InlineKeyboardButton(u, callback_data=f"tree_{conversation_id}_{i}"))
			i += 1
		except:
			print(traceback.format_exc())

	return keyboard


def rate_keyboard_all(conversation_id: int):
	"""
	—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Ü–µ–Ω–∫–æ–π

	:conversation_id: ID –¥–∏–∞–ª–æ–≥–∞
	"""
	markup = types.InlineKeyboardMarkup(row_width=5)

	for rate_value in range(1, 6):
		markup.insert(
			types.InlineKeyboardButton("üò¢üôÅüòêüôÇüòÑ"[rate_value - 1], callback_data=f"rate_{rate_value}_{conversation_id}")
		)

	return markup


def user_menu_keyboard():
	"""
	–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
	"""
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

	markup.row("–ú–µ–Ω—é")

	return markup


@dp.message_handler(commands=["add_rule"])
async def add_rule_bot(message: types.Message):
	"""
	–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ (—Å—Ç–æ–ø-—Å–ª–æ–≤)
	"""
	words = message.text.replace("/add_rule ", "")  # –æ—Ç–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ —Å—Ç–æ–ø —Å–ª–æ–≤–∞

	# —Å–ø–∏—Å–æ–∫
	rules_list: list[str] = []

	# –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ –ê–ü–ò –ø–æ –æ–¥–Ω–æ–º—É
	for word in words.split():
		response = requests.post(
			base_url + "/add_filter?token=" + company_token + "&filter=" + str(word).lower()
		).json()

		if response['status'] == "SUCCESS":
			rules_list.append(str(response['filter_text']))

	await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n<i>{','.join(rules_list)}</i>")


@dp.message_handler(commands=["archive_rule"])
async def archive_rule_handler(message: types.Message):
	"""
	–ê—Ä—Ö–≤–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ (—Å—Ç–æ–ø-—Å–ª–æ–≤–∞)
	"""
	rules_texts = message.text.replace("/archive_rule ", "")  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª –Ω–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é

	# —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
	status_text = ""

	# –±–µ–∂–∏–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–π–¥–∏—à–Ω–∏–∫–∞–º
	for text in rules_texts.split():

		# –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞
		response = requests.get(
			base_url + "/archive_filter?token=" + company_token + "&rule_text=" + text).json()

		# —É—Å–ø–µ—Ö
		if response['status'] == 'SUCCESS':
			status_text += f"‚úÖ –§–∏–ª—å—Ç—Ä <i>{response['filter_text']}</i> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n"
		# —Ñ–∏–ª—å—Ç—Ä —É–∂–µ —É–¥–∞–ª–µ–Ω / –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		else:
			status_text += f"‚ùå –§–∏–ª—å—Ç—Ä <i>{text}</i> –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω!\n"

	return await message.answer(status_text)


@dp.message_handler(commands=["block_url"])
async def block_url_handler(message: types.Message):
	"""
	–ü–æ–º–µ—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
	"""
	urls = message.text.replace("/block_url", "")  # –æ—Ç–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ —Å—Ç–æ–ø —Å–ª–æ–≤–∞
	print(urls)
	if not urls:
		return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

	# —Å–ø–∏—Å–æ–∫
	urls_list: list[str] = []

	# –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ –ê–ü–ò –ø–æ –æ–¥–Ω–æ–º—É
	for url in urls.split():
		response = requests.post(
			base_url + "/block_url?token=" + company_token + "&uri=" + str(url).lower()
		).json()

		if response['status'] == "SUCCESS":
			urls_list.append(str(response['uri']))

	await message.answer(f"‚úÖ URL –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n<i>{','.join(urls_list)}</i>")


@dp.message_handler(commands=["unblock_url"])
async def unblock_url_handler(message: types.Message):
	"""
	–£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	"""
	urls = message.text.replace("/unblock_url", "")  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª –Ω–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é

	if not urls:
		return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–∞–º–∞—Ç –≤–≤–æ–¥–∞.")

	# —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
	status_text = ""

	# –±–µ–∂–∏–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–π–¥–∏—à–Ω–∏–∫–∞–º
	for url in urls.split():

		# –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞
		response = requests.post(
			base_url + "/unblock_url?token=" + company_token + "&uri=" + url).json()

		# —É—Å–ø–µ—Ö
		if response['status'] == 'SUCCESS':
			status_text += f"‚úÖ –†–µ—Å—É—Ä—Å <i>{response['uri']}</i> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!\n"
		# —Å—Å—ã–ª–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ / –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		else:
			status_text += f"‚ùå –†–µ—Å—É—Ä—Å <i>{url}</i> –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω!\n"

	return await message.answer(status_text)


@dp.message_handler()
async def all_text_hander(message: types.Message):
	"""
	–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –±–æ—Ç–∞
	"""
	# —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	text = message.text
	# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user_id = message.chat.id

	# –ø–æ–ª—É—á–∞–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–∑ –±–∞–∑—ã
	state = user_database.get(user_id)

	# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥
	new_user = not state

	print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + str(state) + ", —Å–æ–æ–±—â–µ–Ω–∏–µ: " + text)

	# –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if not state or text.lower() in ["–º–µ–Ω—é", "/start", "/reset", "/restart"]:

		# –µ—Å–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –±—ã–ª–æ –æ–±—â–µ–Ω–∏–µ
		if state and state['has_answers']:
			# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–± –æ—Ü–µ–Ω–∫–µ –¥–∏–∞–ª–æ–≥–∞
			await message.answer(
				"–û—Ü–µ–Ω–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à—ë–ª –¥–∏–∞–ª–æ–≥.",
				reply_markup=rate_keyboard_all(state['conversation_id'])
			)

		# —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
		url = f"{base_url}/new_conversation?user_id={user_id}&token={company_token}&initial_message={quote(text)}"
		print(url)
		response = requests.post(url).json()
		print(response)

		# —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ user_database,
		# –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è ID –¥–∏–∞–ª–æ–≥–∞ (—Å –ê–ü–ò) –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		state = user_database[user_id] = {
			"conversation_id": response["conversation"]["conversation_id"],
			"buttons": response["conversation"]["response_buttons"]
		}

	# –¥–∏–∞–ª–æ–≥ —É–∂–µ –±—ã–ª –Ω–∞—á–∞—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ
	else:
		# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∂–µ –∏–º–µ—é—â–µ–º—Å—è –¥–∏–∞–ª–æ–≥–µ
		response = requests.post(
			f"{base_url}/new_user_message?user_id={user_id}&token={company_token}&conversation_id={state['conversation_id']}&text={quote(text)}").json()
		print(response)

	# –æ–±–Ω—É–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	state["active_message_id"] = None

	# –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
	error, text, buttons = update_state(user_id, response)

	if error:
		await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + error)
	else:
		# –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å —Å –¥—Ä–æ–±–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ª–∏–º–∏—Ç–∞–º Telegram Bot Api
		for answer_part in range(0, len(text), telegram_limit_value):
			for cropped_text in [text[answer_part:answer_part + telegram_limit_value]]:
				if new_user:
					# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					await message.answer("üëã", reply_markup=user_menu_keyboard())

				last_message = await message.answer(
					text=cropped_text,
					reply_markup=create_user_kb(buttons, state['conversation_id']),
					disable_web_page_preview=True
				)

		# –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		state["active_message_id"] = last_message.message_id


@dp.callback_query_handler(text_contains="tree_")
async def handle_active_conversation_buttons(call: types.CallbackQuery):
	"""
	–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–ø–∏ —Å –≤–µ—Ç–∫–∞–º–∏ –¥–µ—Ä–µ–≤–∞

	–í–∏–¥: tree_conversaionId_...TextIDX
	"""
	user_id = call.message.chat.id

	print(f"User {user_id} pressed on button {call.data}")

	# –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏, —Ä–∞–∑–¥–µ–ª—è—è –ø–æ —Å–∏–º–≤–æ–ª—É
	data = call.data.split("_")

	conv_id = int(data[1])  # ID –¥–∏–∞–ª–æ–≥–∞ (conversation_id)

	state = user_database.get(user_id)  # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
	if not state or state['conversation_id'] != conv_id:
		return

	text = state["buttons"][int(data[2])]

	response = None

	# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –¥–µ—Ä–µ–≤–µ
	try:
		response = requests.post(
			f"{base_url}/new_user_message?user_id={user_id}&token={company_token}&conversation_id={state['conversation_id']}&text={quote(text)}").json()
	except Exception:
		traceback.print_exc()

	# –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	error, text, buttons = update_state(user_id, response)

	# –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
	if error:
		await bot.answer_callback_query(
			call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + error, show_alert=False)
	else:
		# –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		state["active_message_id"] = await edit_or_send_more(
			chat_id=user_id,
			message_id=call.message.message_id,
			text=text,
			markup=create_user_kb(buttons, conv_id)
		)


@dp.callback_query_handler(text_contains="rate_")
async def get_rate_value_handler(call: types.CallbackQuery):
	"""
	–û—Ü–µ–Ω–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –ø—è—Ç–∏–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ
	"""
	await call.answer()

	# —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ callback_data –ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	data = call.data.split("_")

	# –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-5)
	rate_value = data[1]
	# –ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –¥–∏–∞–ª–æ–≥–∞
	conversation_id = data[2]

	# –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
	response = requests.put(
		f"{base_url}/rate_chat?token={company_token}&conversation_id={conversation_id}&rate={rate_value}"
	).json()
	if response["status"] == "SUCCESS":
		await call.message.edit_text(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ!')


async def edit_or_send_more(chat_id: int, message_id: int, text: str, markup) -> int:
	"""
	–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è / –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
	"""
	print(f"editing message {message_id} to {text}, {markup}")

	# —Ñ–ª–∞–≥ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞
	multiple_messages = len(text) > telegram_limit_value

	# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
	try:
		# –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –±–æ—Ç–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
		await bot.send_chat_action(chat_id, "typing")

		# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		await bot.edit_message_text(
			chat_id=chat_id, message_id=message_id, text=text[:telegram_limit_value],
			reply_markup=types.InlineKeyboardMarkup() if multiple_messages else markup, disable_web_page_preview=True
		)
	except aiogram.utils.exceptions.MessageNotModified:
		print("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")

	# –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å –ø–æ —á–∞—Å—Ç—è–º
	if multiple_messages:
		# ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		last_message_id = None
		# –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
		text = text[telegram_limit_value:]
		# –ø–æ–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ —á–∞—Å—Ç—è–º
		while len(text):
			piece = text[:telegram_limit_value]
			text = text[telegram_limit_value:]

			m = None if text else markup

			sent_message = await bot.send_message(chat_id=chat_id, text=piece, reply_markup=m, disable_web_page_preview=True)
			last_message_id = sent_message.message_id

		return last_message_id

	return message_id


def update_state(user_id, response):
	"""
	–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ '–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
	"""
	# –ê–ü–ò –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É
	if response['status'] != 'SUCCESS':
		return response['status'], None, None

	conversation = response['conversation']

	# –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
	state = user_database[user_id]
	# –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state['conversation_id'] = conversation['conversation_id']
	state['buttons'] = conversation['response_buttons']
	state['finished'] = conversation['response_finished']
	state['has_answers'] = conversation['has_answers']

	return None, conversation['response_text'], conversation['response_buttons']


async def update_messages():
	"""
	–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞)
	"""

	while True:
		await asyncio.sleep(1)
		for user_id in user_database.keys():
			print("Updating messages")
			try:
				# –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
				state = user_database[user_id]

				# –µ—Å–ª–∏ –±–æ—Ç –ø—Ä–∏—Å–ª–∞–ª finished, —Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç
				if state.get('finished'):
					continue

				# –ø–æ–ª—É—á–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				msg_id = state.get('active_message_id')
				
				# –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å - –µ–≥–æ –ø–æ–∫–∞ –Ω–µ –≤—ã–π–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
				if not msg_id:
					continue

				# –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ
				response = requests.get(
					f"{base_url}/get_conversation?token={company_token}&conversation_id={state['conversation_id']}").json()

				# –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–∑–æ–≤—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ê–ü–ò
				error, text, buttons = update_state(user_id, response)

				# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è / –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
				await edit_or_send_more(
					chat_id=user_id,
					message_id=msg_id,
					text=text or f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}",
					markup=create_user_kb(buttons, state['conversation_id']))
				if error:
					state['active_message_id'] = None

			except Exception as e:
				traceback.print_exc()

async def on_startup(_):
	# –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	asyncio.create_task(update_messages())

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
aiogram.executor.start_polling(dp, on_startup=on_startup)
